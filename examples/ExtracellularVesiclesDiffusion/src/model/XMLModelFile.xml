<?xml version="1.0" encoding="utf-8"?>
<gpu:xmodel xmlns:gpu="http://www.dcs.shef.ac.uk/~paul/XMMLGPU" xmlns="http://www.dcs.shef.ac.uk/~paul/XMML">
  
  <name>ExtracellularVesiclesDiffusion</name>

  <gpu:environment>
    <gpu:constants>
      <!-- const_Boltzmann -->
      <gpu:variable>
        <type>float</type>
        <name>const_Boltzmann</name>
        <description>Boltzmann constant</description>
        <defaultValue>1.3806504e-23f</defaultValue>
      </gpu:variable>
      <!-- const_Temperature_K -->
      <gpu:variable>
        <type>float</type>
        <name>const_Temperature_K</name>
        <description>Temperature (Kelvins) 20c = 293.15</description>
        <defaultValue>293.15f</defaultValue>
      </gpu:variable>
      <!-- const_Boltzmann_x_Temp_K -->
      <gpu:variable>
        <type>float</type>
        <name>const_Boltzmann_x_Temp_K</name>
        <description>Value needed for computing the diffusion rate</description>
        <defaultValue>4.0473766476e-21</defaultValue>
      </gpu:variable>
      <!-- const_water_dynamic_viscosity -->
      <gpu:variable>
        <type>float</type>
        <name>const_water_dynamic_viscosity_pas</name>
        <description>
          The dynamic (or absolute) viscosity of water @20C
          Source http://www.viscopedia.com/viscosity-tables/substances/water/
          Value used to compute the diffusion coefficient of new EVs
          In Pascal-seconds, equiv to 1.0005 mPa*s
          Also, from:
          https://www.engineeringtoolbox.com/viscosity-converter-d_413.html
          Water at 68.4oF (20.2oC) has an absolute viscosity of one - 1 - centiPoise
        </description>
        <defaultValue>0.0010016f</defaultValue>
      </gpu:variable>
      <!-- const_water_kinematic_viscosity -->
      <gpu:variable>
        <type>float</type>
        <name>const_water_kinematic_viscosity_kg_ums</name>
        <description>
          A measure of inherent resistance to flow when no external force, except gravity, is acting on the fluid.
          Value at 20C, source http://www.viscopedia.com/viscosity-tables/substances/water/
          Used to compute the drag force acting on the EVs at collision time.
          @20c = 1.0034 mm^2/s
          0.00102 poise or 1.002 mPa.s

          1 St = 100 cSt
          1 cSt (centiStoke) = 10^-6 m^2/s = 1 mm^2/s
          1 m^2/s = 106 centiStokes

          It is calculated by dividing the dynamic viscosity by density
          https://www.engineeringclicks.com/viscosity-of-water/

          https://www.thermexcel.com/english/tables/eau_atm.htm

          Density of water in 998.2 kg/m^3
          Dynamic viscosity 0.001003 kg/m.s

          The SI unit of ν is m2/s. The SI unit of ρ is kg/m^3. ρ-rho

        </description>
        <defaultValue>0.001003</defaultValue>
      </gpu:variable>
      <!-- const_6_pi_dynamic_viscosity -->
      <gpu:variable>
        <type>float</type>
        <name>const_6_pi_dynamic_viscosity</name>
        <description>precomputed value required for computing diffusion rate. Value: -6*pi*dyn_visc</description>
      </gpu:variable>
      <!-- const_6_pi_kinematic_viscosity -->
      <gpu:variable>
        <type>float</type>
        <name>const_6_pi_kinematic_viscosity</name>
        <description>precomputed value required for computing drag. Value: -6*pi*kin_visc</description>
      </gpu:variable>
      <!-- const_boltzmann_x_temp -->
      <gpu:variable>
        <type>float</type>
        <name>const_boltzmann_x_temp</name>
        <description>Value required for computing viscosity and drag</description>
      </gpu:variable>
      <!-- const_pi_4div3 -->
      <gpu:variable>
        <type>float</type>
        <name>const_pi_4div3</name>
        <description>Precomputed value for 4/3 * Pi</description>
        <defaultValue>4.1887902047863905</defaultValue>
      </gpu:variable>
      <!-- const_mass_per_volume_unit -->
      <gpu:variable>
        <type>float</type>
        <name>const_mass_per_volume_unit</name>
        <description>Precomputed value for 100 nm ev mass / 100nm volume (1.0465851455395313e-22)</description>
        <defaultValue>0.00000000000000000000010465851455395313f</defaultValue>
      </gpu:variable>
      <!-- const_mass_per_volume_unit times 4div3_pi -->
      <gpu:variable>
        <type>float</type>
        <name>const_mass_p_vol_u_x_4div3_pi</name>
        <description>Precomputed value (4.38392560611093E-22)</description>
        <defaultValue>0.000000000000000000000438392560611093f</defaultValue>
      </gpu:variable>

      <!-- ev_collisions -->
      <gpu:variable>
        <type>int</type>
        <name>ev_collisions</name>
        <description>Boolean flag to determine at runtime if ev collisions could happen in the simulation</description>
        <defaultValue>1</defaultValue>
      </gpu:variable>
      <!-- boundaries -->
      <gpu:variable>
        <type>int</type>
        <name>boundaries</name>
        <description>Boolean flag</description>
        <defaultValue>1</defaultValue>
      </gpu:variable>
      <!-- drag -->
      <gpu:variable>
        <type>int</type>
        <name>drag</name>
        <description>Boolean flag</description>
        <defaultValue>1</defaultValue>
      </gpu:variable>
      <!-- brownian_motion_1d -->
      <gpu:variable>
        <type>int</type>
        <name>brownian_motion_1d</name>
        <description>Boolean flag</description>
        <defaultValue>0</defaultValue>
      </gpu:variable>
      <!-- brownian_motion_2d -->
      <gpu:variable>
        <type>int</type>
        <name>brownian_motion_2d</name>
        <description>Boolean flag</description>
        <defaultValue>0</defaultValue>
      </gpu:variable>
      <!-- apoptosis -->
      <gpu:variable>
        <type>int</type>
        <name>apoptosis</name>
        <description>Boolean flag</description>
        <defaultValue>1</defaultValue>
      </gpu:variable>
      <gpu:variable>
        <type>float</type>
        <name>apoptosis_threshold</name>
        <description>Probability of dying at any given second within N hours
        1:0.00027, 2:0.000138888888889, 3:9.25925925926e-05, 4:6.94444444444e-05, 5:5.55555555556e-05
        6:4.62962962963e-05, 8:3.472e-5, 10:2.77777777778e-05, 12:2.3148e-5,
        18:1.54320987654e-05, 24: 1.15740740741e-05. Default: 4 hrs</description>
        <defaultValue>6.94e-5</defaultValue>
      </gpu:variable>
      <gpu:variable>
        <type>float</type>
        <name>apoptosis_frequency</name>
        <defaultValue>1.0</defaultValue>
      </gpu:variable>

      <!-- ev_secretion -->
      <gpu:variable>
        <type>int</type>
        <name>ev_secretion</name>
        <defaultValue>1</defaultValue>
      </gpu:variable>
      <!-- ev_secretion_interval -->
      <gpu:variable>
        <type>float</type>
        <name>ev_secretion_interval</name>
        <description>Secretion will occur between [nSec,2nSec]</description>
        <defaultValue>30.0f</defaultValue>
      </gpu:variable>
      <!-- ev_secretion_threshold -->
      <gpu:variable>
        <type>float</type>
        <name>ev_secretion_threshold</name>
        <defaultValue>0.95f</defaultValue>
      </gpu:variable>
      <gpu:variable>
        <type>int</type>
        <name>min_ev_radius</name>
        <description>Smallest EV radius possible in the system</description>
        <defaultValue>40</defaultValue>
      </gpu:variable>
      <gpu:variable>
        <type>int</type>
        <name>max_ev_radius</name>
        <description>Largest EV radius possible in the system (must subtract the min_ev_radius value)</description>
        <defaultValue>120</defaultValue>
      </gpu:variable>
      
      <!-- dt - timestep of the model -->
      <gpu:variable>
        <type>float</type>
        <name>dt</name>
        <description>The timestep of the model</description>
        <defaultValue>0.003967782</defaultValue>
      </gpu:variable>
      <!-- degrees of Freedom -->
      <gpu:variable>
        <type>int</type>
        <name>dof</name>
        <description>Degrees of Freedom in the model</description>
        <defaultValue>2</defaultValue>
      </gpu:variable>
      <gpu:variable>
        <type>unsigned int</type>
        <name>iteration</name>
        <defaultValue>0</defaultValue>
      </gpu:variable>
      
    </gpu:constants>
    
    <gpu:functionFiles>
      <file>functions.c</file>
    </gpu:functionFiles>

    <gpu:initFunctions>
      <gpu:initFunction>
        <gpu:name>precompute_values</gpu:name>
      </gpu:initFunction>
    </gpu:initFunctions>
    <gpu:stepFunctions>
      <gpu:stepFunction>
        <gpu:name>increase_iteration</gpu:name>
      </gpu:stepFunction>
    </gpu:stepFunctions>
    
  </gpu:environment>

  <xagents>
    <!-- Secretory cells -->
    <gpu:xagent>
      <name>SecretoryCell</name>
      <memory>
        <gpu:variable>
          <type>int</type>
          <name>id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_x_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_length</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_length</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>time_to_next_secretion_attempt</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>probability_of_secretion</name>
        </gpu:variable>
        <gpu:variable>
          <type>int</type>
          <name>source_points</name>
          <defaultValue>11</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>source_points_xs</name>
          <arrayLength>11</arrayLength>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>source_points_ys</name>
          <arrayLength>11</arrayLength>
        </gpu:variable>
        <gpu:variable>
          <type>int</type>
          <name>last_source_point_secreting</name>
          <defaultValue>-1</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>unsigned int</type>
          <name>last_ev_id</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
      </memory>
      <functions>
        <!-- output_secretory_cell_location -->
        <gpu:function>
          <name>output_secretory_cell_location</name>
          <description>Adds the cell position to the "location" message list. This list is used for collision detection purposes.</description>
          <currentState>s_default</currentState>
          <nextState>s_default</nextState>
          <outputs>
            <gpu:output>
              <messageName>secretory_cell_location</messageName>
              <gpu:type>single_message</gpu:type>
            </gpu:output>
          </outputs>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        
        <!-- add new EVs -->
        <gpu:function>
          <name>secrete_ev</name>
          <description>Introduces a new EV agent into the simulation based on probabilistic rules.</description>
          <currentState>s_default</currentState>
          <nextState>s_default</nextState>
          <xagentOutputs>
            <gpu:xagentOutput>
              <xagentName>EV</xagentName>
              <state>initial</state>
            </gpu:xagentOutput>
          </xagentOutputs>
          <gpu:globalCondition>
            <lhs>
              <value>ev_secretion</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>true</gpu:RNG>
        </gpu:function>
      </functions>
      <states>
        <gpu:state>
          <name>s_default</name>
        </gpu:state>
        <initialState>s_default</initialState>
      </states>
      <gpu:type>continuous</gpu:type>
      <gpu:bufferSize>131072</gpu:bufferSize>
    </gpu:xagent>
    <!-- Ciliary cells -->
    <gpu:xagent>
      <name>CiliaryCell</name>
      <memory>
        <gpu:variable>
          <type>int</type>
          <name>id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_x_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_length</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_length</name>
        </gpu:variable>
      </memory>
      <functions>
        <!-- output_ciliary_cell_location -->
        <gpu:function>
          <name>output_ciliary_cell_location</name>
          <description>Adds the cell location to the "location" message list. This list is used for collision detection purposes.</description>
          <currentState>c_default</currentState>
          <nextState>c_default</nextState>
          <outputs>
            <gpu:output>
              <messageName>ciliary_cell_location</messageName>
              <gpu:type>single_message</gpu:type>
            </gpu:output>
          </outputs>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
      </functions>
      <states>
        <gpu:state>
          <name>c_default</name>
        </gpu:state>
        <initialState>c_default</initialState>
      </states>
      <gpu:type>continuous</gpu:type>
      <gpu:bufferSize>131072</gpu:bufferSize>
    </gpu:xagent>
    
    <!-- EV -->
    <gpu:xagent>
      <name>EV</name>
      <memory>
        <gpu:variable>
          <type>unsigned int</type>
          <name>id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x_1</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y_1</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>vx</name>
          <description>The component on X of velocity_um</description>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>vy</name>
          <description>The component on Y of velocity_um</description>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>bm_vx</name>
          <description>The component on X of velocity_um</description>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>bm_vy</name>
          <description>The component on Y of velocity_um</description>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>mass_ag</name>
          <description>Mass of the vesicle in attograms</description>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>radius_um</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>diffusion_rate_um</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>diff_rate_um_x_twice_dof</name>
        </gpu:variable>
        <gpu:variable>
          <type>unsigned int</type>
          <name>closest_ev_id</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>closest_ev_distance</name>
          <defaultValue>100</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>int</type>
          <name>closest_secretory_cell_id</name>
          <defaultValue>-1</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>closest_secretory_cell_distance</name>
          <defaultValue>100</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>int</type>
          <name>closest_ciliary_cell_id</name>
          <defaultValue>-1</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>closest_ciliary_cell_distance</name>
          <defaultValue>100</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>unsigned int</type>
          <name>last_ev_collision</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>unsigned int</type>
          <name>last_cell_collision</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>age</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>apoptosis_timer</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>time_in_initial_state</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>velocity_ums</name>
          <description>Velocity in um/s - mean diffusion distance obtained from MSD</description>
        </gpu:variable>

        <gpu:variable>
          <type>float</type>
          <name>debugNanInfVelocity</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>debugNanInfLocation</name>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>debugDiv0</name>
          <description>Identifies the function where a Div0 occured</description>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>debugNanInfValue</name>
          <description>Identifies the function where a NaN or Inf occured</description>
          <defaultValue>0</defaultValue>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>debugDragVel0At</name>
          <defaultValue>-1</defaultValue>
        </gpu:variable>
        
        <gpu:variable>
          <type>float</type>
          <name>debugNonFiniteBmAt</name>
          <defaultValue>-1</defaultValue>
        </gpu:variable>
      </memory>
      <functions>
        <!-- output_location_ev_default -->
        <gpu:function>
          <name>output_location_ev_default</name>
          <description>Adds the EV's current position to the "location" message list, for collision detection purposes.</description>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <outputs>
            <gpu:output>
              <messageName>location_ev_default</messageName>
              <gpu:type>single_message</gpu:type>
            </gpu:output>
          </outputs>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- output_location_ev_initial -->
        <gpu:function>
          <name>output_location_ev_initial</name>
          <description>Adds the EV's current position to the "location" message list, for collision detection purposes.</description>
          <currentState>initial</currentState>
          <nextState>initial</nextState>
          <outputs>
            <gpu:output>
              <messageName>location_ev_initial</messageName>
              <gpu:type>single_message</gpu:type>
            </gpu:output>
          </outputs>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        
        <!-- test secretory cell collision -->
        <gpu:function>
          <name>test_secretory_cell_collision</name>
          <description>Checks for possible collisions with secretory boundaries. Outputs an optional collision_message.
          EVs colliding with a cell contain the parameter "closest_cell_id" > -1 and have a value on "closest_cell_distance"</description>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <inputs>
            <gpu:input>
              <messageName>secretory_cell_location</messageName>
            </gpu:input>
          </inputs>
          <outputs>
            <gpu:output>
              <messageName>secretory_cell_collision</messageName>
              <gpu:type>optional_message</gpu:type>
            </gpu:output>
          </outputs>
          <gpu:globalCondition>
            <lhs>
              <value>boundaries</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- secretory cell collision resolution -->
        <gpu:function>
          <name>secretory_cell_collision_resolution</name>
          <description>Corrects the position of an EV as a result of colliding with a cell.
          This function only applies to EVs with variable "closest_cell_id" &gt; -1 &amp;
          (closest_ev_id == -1 || closest_cell_distance &lt; closest_ev_distance)</description>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <inputs>
            <gpu:input>
              <messageName>secretory_cell_collision</messageName>
            </gpu:input>
          </inputs>
          <!-- check there is a secretory_cell_collision only or it happens before the ev collision -->
          <condition>
            <!-- secretory_cell_collision -->
			        <lhs>
				        <condition><lhs><agentVariable>closest_secretory_cell_id</agentVariable></lhs><operator>&gt;</operator><rhs><value>-1.0f</value></rhs></condition>
			        </lhs>
			        <operator>&amp;&amp;</operator>
			        <rhs>
				        <condition>
                  <!-- NO other collision involves this agent  -->
					        <lhs>
                    <condition><lhs><agentVariable>closest_ciliary_cell_id</agentVariable></lhs><operator>&lt;</operator><rhs><value>0</value></rhs></condition>
					        </lhs>
                  <!-- END No other collision involves this agent -->
					        <operator>||</operator>
                  <!-- this collision happened first -->
                  <rhs>
						        <condition>
                      <lhs>
                        <condition>
                          <lhs>
                            <agentVariable>closest_ciliary_cell_id</agentVariable>
                          </lhs>
                          <operator>&gt;</operator>
                          <rhs>
                            <value>-1.0f</value>
                          </rhs>
                        </condition>
                      </lhs>
                      <operator>&amp;&amp;</operator>
                      <rhs>
                        <condition>
                          <lhs>
                            <agentVariable>closest_ciliary_cell_distance</agentVariable>
                          </lhs>
                          <operator>&gt;=</operator>
                          <rhs>
                            <agentVariable>closest_secretory_cell_distance</agentVariable>
                          </rhs>
                        </condition>
                      </rhs>
						        </condition>
					        </rhs>
                  <!-- END this collision happened first -->
				        </condition>
			        </rhs>
		        </condition>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        
        <!-- test ciliary cell collision -->
        <gpu:function>
          <name>test_ciliary_cell_collision</name>
          <description>Checks for possible collisions with ciliary boundaries. Outputs an optional collision_message.
          EVs colliding with a cell contain the parameter "closest_cell_id" > -1 and have a value on "closest_cell_distance"</description>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <inputs>
            <gpu:input>
              <messageName>ciliary_cell_location</messageName>
            </gpu:input>
          </inputs>
          <outputs>
            <gpu:output>
              <messageName>ciliary_cell_collision</messageName>
              <gpu:type>optional_message</gpu:type>
            </gpu:output>
          </outputs>

          <gpu:globalCondition>
            <lhs>
              <value>boundaries</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- ciliary_cell collision resolution -->
        <gpu:function>
          <name>ciliary_cell_collision_resolution</name>
          <description>Corrects the position of an EV as a result of colliding with a ciliary cell.
          This function only applies to EVs with variable "closest_cell_id" &gt; -1 &amp;
          (closest_ev_id == -1 || closest_cell_distance &lt; closest_ev_distance)</description>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <inputs>
            <gpu:input>
              <messageName>ciliary_cell_collision</messageName>
            </gpu:input>
          </inputs>
          <!-- check there is a cell collision only or it happens before others -->
		          <condition>
                <!-- ciliary cell collision -->
			          <lhs>
				          <condition><lhs><agentVariable>closest_ciliary_cell_id</agentVariable></lhs><operator>&gt;</operator><rhs><value>-1.0f</value></rhs></condition>
			          </lhs>
			          <operator>&amp;&amp;</operator>
			          <rhs>
				          <condition>
					          <lhs>
						          <!-- NO other collision -->
                      <condition>
                        <lhs>
                          <agentVariable>closest_secretory_cell_id</agentVariable>
                        </lhs>
                        <operator>&lt;</operator>
                        <rhs>
                          <value>0</value>
                        </rhs>
                      </condition>
						          <!-- END NO other collision -->
					          </lhs>
					          <operator>||</operator>
					          <rhs>
					            <!-- This is the closest collision  -->
                      <condition>
                        <lhs>
                          <condition>
                            <lhs>
                              <agentVariable>closest_secretory_cell_id</agentVariable>
                            </lhs>
                            <operator>&gt;</operator>
                            <rhs>
                              <value>-1.0f</value>
                            </rhs>
                          </condition>
                        </lhs>
                        <operator>&amp;&amp;</operator>
                        <rhs>
                          <condition>
                            <lhs>
                              <agentVariable>closest_secretory_cell_distance</agentVariable>
                            </lhs>
                            <operator>&gt;</operator>
                            <rhs>
                              <agentVariable>closest_ciliary_cell_distance</agentVariable>
                            </rhs>
                          </condition>
                        </rhs>
                      </condition>
						          <!-- END This is the closest collision -->
					          </rhs>
				          </condition>
			          </rhs>
		          </condition>

          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- test_collision_ev_default_ev_initial -->
        <gpu:function>
          <name>test_collision_ev_default_ev_initial</name>
          <description>Checks for possible collisions with other EVs. Outputs an optional collision_message.
          EVs colliding with another EV contain the parameter "closest_ev_id" > -1 and have a value on "closest_ev_distance"</description>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <inputs>
            <gpu:input>
              <messageName>location_ev_initial</messageName>
            </gpu:input>
          </inputs>
          <gpu:globalCondition>
            <lhs>
              <value>ev_collisions</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <gpu:function>
          <name>test_collision_ev_initial_ev_default</name>
          <description>Checks for possible collisions with other EVs. EVs in initial state colliding
          with another EV conserve the same position from the previous iteration</description>
          <currentState>initial</currentState>
          <nextState>initial</nextState>
          <inputs>
            <gpu:input>
              <messageName>location_ev_default</messageName>
            </gpu:input>
          </inputs>
          <gpu:globalCondition>
            <lhs>
              <value>ev_collisions</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- test_collision_ev_default_ev_default -->
        <gpu:function>
          <name>test_collision_ev_default_ev_default</name>
          <description>Checks for possible collisions with other EVs. Outputs an optional collision_message.
          EVs colliding with another EV contain the parameter "closest_ev_id" > -1 and have a value on "closest_ev_distance"</description>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <inputs>
            <gpu:input>
              <messageName>location_ev_default</messageName>
            </gpu:input>
          </inputs>
          <gpu:globalCondition>
            <lhs>
              <value>ev_collisions</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- brownian movement affecting the agent -->
        <!-- 1D 
        <gpu:function>
          <name>brownian_movement_1d</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:globalCondition>
            <lhs>
              <value>brownian_motion_1d</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>true</gpu:RNG>
        </gpu:function>-->
        <!-- 2D -->
        <gpu:function>
          <name>brownian_movement_2d</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:globalCondition>
            <lhs><value>brownian_motion_2d</value></lhs>
            <operator>&gt;</operator>
            <rhs><value>0</value></rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
          <gpu:RNG>true</gpu:RNG>
        </gpu:function>
        
        <!-- reset agent state in preparation to execute the next simulation step -->
        <gpu:function>
          <name>reset_state</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:reallocate>false</gpu:reallocate>
        </gpu:function>
        <gpu:function>
          <name>reset_state_initial</name>
          <currentState>initial</currentState>
          <nextState>initial</nextState>
          <gpu:reallocate>false</gpu:reallocate>
        </gpu:function>
        <!-- initial to default -->
        <gpu:function>
          <name>initial_to_default</name>
          <currentState>initial</currentState>
          <nextState>default</nextState>
          <condition>
            <lhs>
              <agentVariable>age</agentVariable>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <agentVariable>time_in_initial_state</agentVariable>
            </rhs>
          </condition>
          <gpu:reallocate>false</gpu:reallocate>
        </gpu:function>
        
        <!-- move_bm -->
        <gpu:function>
          <name>move_bm</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:globalCondition>
            <lhs><value>brownian_motion_2d</value></lhs>
            <operator>&gt;</operator>
            <rhs><value>0</value></rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
        </gpu:function>
        <!-- move -->
        <gpu:function>
          <name>move</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:globalCondition>
            <lhs><value>brownian_motion_2d</value></lhs>
            <operator>&lt;</operator>
            <rhs><value>1</value></rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
        </gpu:function>
        <!-- move_initial -->
        <gpu:function>
          <name>moveInitial</name>
          <currentState>initial</currentState>
          <nextState>initial</nextState>
          <gpu:reallocate>false</gpu:reallocate>
        </gpu:function>
        <!-- drag_force -->
        <gpu:function>
          <name>drag_force</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:globalCondition>
            <lhs>
              <condition><lhs><value>drag</value></lhs><operator>&gt;</operator><rhs><value>0</value></rhs></condition>
            </lhs>
            <operator>&amp;&amp;</operator>
            <rhs>
              <condition><lhs><value>brownian_motion_2d</value></lhs><operator>&lt;</operator><rhs><value>1</value></rhs></condition>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
	        <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- drag_force_bm -->
        <gpu:function>
          <name>drag_force_bm</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:globalCondition>
            <lhs>
              <condition><lhs><value>drag</value></lhs><operator>&gt;</operator><rhs><value>0</value></rhs></condition>
            </lhs>
            <operator>&amp;&amp;</operator>
            <rhs>
              <condition><lhs><value>brownian_motion_2d</value></lhs><operator>&gt;</operator><rhs><value>0</value></rhs></condition>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>false</gpu:reallocate>
	        <gpu:RNG>false</gpu:RNG>
        </gpu:function>
        <!-- ev_default_apoptosis -->
        <gpu:function>
          <name>ev_default_apoptosis</name>
          <currentState>default</currentState>
          <nextState>default</nextState>
          <gpu:globalCondition>
            <lhs>
              <value>apoptosis</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          <gpu:reallocate>true</gpu:reallocate>
	        <gpu:RNG>true</gpu:RNG>
        </gpu:function>
        <!-- ev_initial_apoptosis -->
        <gpu:function>
          <name>ev_initial_apoptosis</name>
          <currentState>initial</currentState>
          <nextState>initial</nextState>
          <!--
          <gpu:globalCondition>
            <lhs>
              <value>apoptosis</value>
            </lhs>
            <operator>&gt;</operator>
            <rhs>
              <value>0</value>
            </rhs>
            <gpu:maxItterations>1000000000</gpu:maxItterations>
            <gpu:mustEvaluateTo>true</gpu:mustEvaluateTo>
          </gpu:globalCondition>
          -->
          <gpu:reallocate>true</gpu:reallocate>
	        <gpu:RNG>false</gpu:RNG>
        </gpu:function>
      </functions>
      
      <states>
        <gpu:state>
          <name>default</name>
        </gpu:state>
        <gpu:state>
          <name>collision_resolved</name>
        </gpu:state>
        <gpu:state>
          <name>initial</name>
        </gpu:state>
        <initialState>initial</initialState>
      </states>
      <gpu:type>continuous</gpu:type>
      <!-- 2^17=131072, 2^16=65536, 1^15=32768, 2^14=16384, 2^13=8192 2^12= 4095, 2^11=2048
      2^18=262144, 2^19=524288, 2^20=1048576, 2^21=2,097,152 2^22=4,192,304 -->
      <gpu:bufferSize>4192304</gpu:bufferSize>
    </gpu:xagent>
  </xagents>
  
  <messages>
    <!-- location_ev_default -->
    <gpu:message>
      <name>location_ev_default</name>
      <variables>
        <gpu:variable>
          <type>unsigned int</type>
          <name>id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>radius_um</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>mass_ag</name>
          <description>Mass of the vesicle in attograms</description>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>vx</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>vy</name>
        </gpu:variable>
      </variables>
      <gpu:partitioningSpatial>
        <gpu:radius>2</gpu:radius>
        <gpu:xmin>0</gpu:xmin>
        <gpu:xmax>3000</gpu:xmax>
        <gpu:ymin>0</gpu:ymin>
        <gpu:ymax>4000</gpu:ymax>
        <gpu:zmin>0</gpu:zmin>
        <gpu:zmax>2</gpu:zmax>
      </gpu:partitioningSpatial>
      <gpu:bufferSize>4192304</gpu:bufferSize>
    </gpu:message>
    <!-- location_ev_initial -->
    <gpu:message>
      <name>location_ev_initial</name>
      <variables>
        <gpu:variable>
          <type>unsigned int</type>
          <name>id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>radius_um</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>mass_ag</name>
          <description>Mass of the vesicle in attograms</description>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>vx</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>vy</name>
        </gpu:variable>
      </variables>
      <gpu:partitioningSpatial>
        <gpu:radius>2</gpu:radius>
        <gpu:xmin>0</gpu:xmin>
        <gpu:xmax>3000</gpu:xmax>
        <gpu:ymin>0</gpu:ymin>
        <gpu:ymax>4000</gpu:ymax>
        <gpu:zmin>0</gpu:zmin>
        <gpu:zmax>2</gpu:zmax>
      </gpu:partitioningSpatial>
      <gpu:bufferSize>524288</gpu:bufferSize>
    </gpu:message>
    <!-- secretory cell_location -->
    <gpu:message>
      <name>secretory_cell_location</name>
      <variables>
        <gpu:variable>
          <type>int</type>
          <name>id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_y</name>
        </gpu:variable>
        
        <gpu:variable>
          <type>float</type>
          <name>direction_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_x_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_length</name>
        </gpu:variable>
        
        <gpu:variable>
          <type>float</type>
          <name>normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_length</name>
        </gpu:variable>
      
      </variables>
      <gpu:partitioningSpatial>
        <gpu:radius>5</gpu:radius>
        <gpu:xmin>0</gpu:xmin>
        <gpu:xmax>3000</gpu:xmax>
        <gpu:ymin>0</gpu:ymin>
        <gpu:ymax>4000</gpu:ymax>
        <gpu:zmin>0</gpu:zmin>
        <gpu:zmax>5</gpu:zmax>
      </gpu:partitioningSpatial>
      <gpu:bufferSize>131072</gpu:bufferSize>
    </gpu:message>
    <!-- ciliary cell_location -->
    <gpu:message>
      <name>ciliary_cell_location</name>
      <variables>
        <gpu:variable>
          <type>int</type>
          <name>id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_y</name>
        </gpu:variable>

        <gpu:variable>
          <type>float</type>
          <name>direction_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y</name>
        </gpu:variable>
      <gpu:variable>
          <type>float</type>
          <name>direction_x_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_y_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>direction_length</name>
        </gpu:variable>
      
        <gpu:variable>
          <type>float</type>
          <name>normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_length</name>
        </gpu:variable>
      </variables>
      <gpu:partitioningSpatial>
        <gpu:radius>5</gpu:radius>
        <gpu:xmin>0</gpu:xmin>
        <gpu:xmax>3000</gpu:xmax>
        <gpu:ymin>0</gpu:ymin>
        <gpu:ymax>4000</gpu:ymax>
        <gpu:zmin>0</gpu:zmin>
        <gpu:zmax>5</gpu:zmax>
      </gpu:partitioningSpatial>
      <gpu:bufferSize>131072</gpu:bufferSize>
    </gpu:message>
    
    <!-- ciliary_cell collision message -->
    <gpu:message>
      <name>ciliary_cell_collision</name>
      <variables>
        <gpu:variable>
          <type>unsigned int</type>
          <name>ev_id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>int</type>
          <name>cell_id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>distance</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_y</name>
        </gpu:variable>
         <gpu:variable>
          <type>float</type>
          <name>p2_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_y</name>
        </gpu:variable>
        
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_x_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_y_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_length</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_length</name>
        </gpu:variable>
      </variables>
      <gpu:partitioningSpatial>
        <gpu:radius>1</gpu:radius>
        <gpu:xmin>0</gpu:xmin>
        <gpu:xmax>3000</gpu:xmax>
        <gpu:ymin>0</gpu:ymin>
        <gpu:ymax>4000</gpu:ymax>
        <gpu:zmin>0</gpu:zmin>
        <gpu:zmax>1</gpu:zmax>
      </gpu:partitioningSpatial>
      <gpu:bufferSize>2097152</gpu:bufferSize>
    </gpu:message>
    <!-- secretory cell collision message -->
    <gpu:message>
      <name>secretory_cell_collision</name>
      <variables>
        <gpu:variable>
          <type>unsigned int</type>
          <name>ev_id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>z</name>
        </gpu:variable>
        <gpu:variable>
          <type>int</type>
          <name>cell_id</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>distance</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p1_y</name>
        </gpu:variable>
         <gpu:variable>
          <type>float</type>
          <name>p2_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>p2_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_x_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_y_unit</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>cell_direction_length</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_x</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>unit_normal_y</name>
        </gpu:variable>
        <gpu:variable>
          <type>float</type>
          <name>normal_length</name>
        </gpu:variable>
      </variables>
      <gpu:partitioningSpatial>
        <gpu:radius>1</gpu:radius>
        <gpu:xmin>0</gpu:xmin>
        <gpu:xmax>3000</gpu:xmax>
        <gpu:ymin>0</gpu:ymin>
        <gpu:ymax>4000</gpu:ymax>
        <gpu:zmin>0</gpu:zmin>
        <gpu:zmax>1</gpu:zmax>
      </gpu:partitioningSpatial>
      <gpu:bufferSize>2097152</gpu:bufferSize>
    </gpu:message>
  </messages>
  
  <layers>
    <layer>
      <gpu:layerFunction>
        <name>ev_default_apoptosis</name>
      </gpu:layerFunction>
      <gpu:layerFunction>
        <name>ev_initial_apoptosis</name>
      </gpu:layerFunction>
    </layer>
    <!-- Vesicles involved in a collision, reset state -->
    <layer>
      <gpu:layerFunction>
        <name>reset_state</name>
      </gpu:layerFunction>
      <gpu:layerFunction>
        <name>reset_state_initial</name>
      </gpu:layerFunction>
      <gpu:layerFunction>
        <name>initial_to_default</name>
      </gpu:layerFunction>
    </layer>
    
    <!-- Compute the velocity of the particle for this step -->
    <layer>
      <gpu:layerFunction>
        <name>brownian_movement_2d</name> <!-- ID 1000 -->
      </gpu:layerFunction>
    </layer>
    <layer>
      <gpu:layerFunction>
        <name>drag_force</name> <!-- ID 1300 -->
      </gpu:layerFunction>
      <gpu:layerFunction>
        <name>drag_force_bm</name> <!-- ID 1600 -->
      </gpu:layerFunction>
    </layer>
    <layer>
      <gpu:layerFunction><name>move</name></gpu:layerFunction> <!-- ID 2000 -->
      <gpu:layerFunction><name>move_bm</name></gpu:layerFunction>
      <gpu:layerFunction><name>moveInitial</name></gpu:layerFunction>
    </layer>

    <!-- Output message to communicate the boundaries positions (ciliary cells, secretory cells) -->
    <layer>
      <gpu:layerFunction>
        <name>output_ciliary_cell_location</name>
      </gpu:layerFunction>
      <gpu:layerFunction>
        <name>output_secretory_cell_location</name>
      </gpu:layerFunction>
    </layer>
    
    <!-- Check for collisions with boundaries (secretory -> ciliary cells)-->
    <layer>
      <gpu:layerFunction>
        <name>test_secretory_cell_collision</name>
      </gpu:layerFunction>
    </layer>
    <layer>
      <gpu:layerFunction>
        <name>test_ciliary_cell_collision</name>
      </gpu:layerFunction>
    </layer>
    
    <!-- The following collision resolutions apply to the closest collision only-->
    <!-- Solve collisions with boundaries (secretory or ciliary cells) -->
    <layer>
      <gpu:layerFunction><name>secretory_cell_collision_resolution</name></gpu:layerFunction>
    </layer> <!-- ID 3000 -->
    
    <layer>      
      <gpu:layerFunction><name>ciliary_cell_collision_resolution</name></gpu:layerFunction>
    </layer> <!-- ID 4000 -->

    <!-- New EVs secretion/generation -->
    <layer>
      <gpu:layerFunction>
        <name>secrete_ev</name>
      </gpu:layerFunction>
    </layer>

    <!-- Collisions between default and initial evs (and solve them) -->
    <layer>
      <gpu:layerFunction>
        <name>output_location_ev_default</name>
      </gpu:layerFunction>
      <gpu:layerFunction>
        <name>output_location_ev_initial</name>
      </gpu:layerFunction>
    </layer>
    <layer>
      <gpu:layerFunction>
        <name>test_collision_ev_default_ev_initial</name> <!-- ID 5000 -->
      </gpu:layerFunction>
      <gpu:layerFunction>
        <name>test_collision_ev_initial_ev_default</name> <!-- ID 5500 -->
      </gpu:layerFunction>
    </layer>
  
    <!-- Collisions between default evs (and solve them) -->
    <layer>
      <gpu:layerFunction>
        <name>output_location_ev_default</name>
      </gpu:layerFunction>
    </layer>
    <layer>
      <gpu:layerFunction>
        <name>test_collision_ev_default_ev_default</name> <!-- ID 6000 -->
      </gpu:layerFunction>
    </layer>
    
  </layers>
</gpu:xmodel>
